DROL Documentation - 11/23/2016 (Updated: 5/23/17)
Written by Bradley Sadowsky, MIT License <bradley.sadowsky@gmail.com>
Current DROL Version: 3.0.0

x = Exit program successfully
0 = Do nothing
i = Increment register one by 1
k = Increment register two by 1
d = Decrement register one by 1
e = Decrement register two by 1
o = Display register one
p = Display register two
a = Display register one to the screen IF REGISTER ONE IS ASCII (0-255)
b = Display register two to the screen IF REGISTER ONE IS ASCII (0-255)
! = Display newline
n = Set register one to user inputted number
q = Set register two to user inputted number
z = Set register one to zero
y = Set register two to zero
1 = Set both registers to the contents of register one
2 = Set both registers to the contents of register two
s = Set register one to the sum of the registers
u = Set register two to the sum of the registers
f = Set register one to the difference of the registers (r1 = r1 - r2)
g = Set register two to the difference of the registers (r2 = r1 - r2)
m = Set register one to the product of the registers
r = Set register two to the product of the registers
e = Set register one to register one squared
h = Set register two to register two squared
j = If statement following j XX YYYY where XX is == (equal), != (not equal), >= (greater than or equal two), <= (less than or equal two), >> (greater than), << (less than) and YYYY is 
	the amount of commands following to be executed
" = If statement following " XX YYYYYYYY where XX is == (equal), != (not equal), >= (greater than or equal two), <= (less than or equal two), >> (greater than), << (less than) and 
	YYYYYYYY is the amount of commands following to be executed
w = While statement following j XX YYYY where XX is == (equal), != (not equal), >= (greater than or equal two), <= (less than or equal two), >> (greater than), << (less than) and YYYY 
	is the amount of commands following to be executed
' = While statement following " XX YYYYYYYY where XX is == (equal), != (not equal), >= (greater than or equal two), <= (less than or equal two), >> (greater than), << (less than) and 
	YYYYYYYY is the amount of commands following to be executed
* = Swaps register one and register two
< = Left shift register one by one
, = Left shift register two by one
> = Right shift register one by one
. = Right shift register two by one
~ = Flip bits in register one
` = Flip bits in register two
^ = XOR register one to register two (r1 = r1 ^ r2)
6 = XOR register two to register one (r2 = r1 ^ r2)
| = OR register one to register two (r1 = r1 | r2)
\ = OR register two to register one (r2 = r1 | r2)
& = AND register one to register two (r1 = r1 & r2)
7 = AND register two to register one (r1 = r1 & r2)
: = Declares a subroutine in the following format
	: XXXX YYYY
	where XXXX represents the amount of commands in the subroutine, and YYYY represents the name of the subroutine
( = Declares a subroutine in the following format
	( XXXXXXXX YYYYYYYY
	where XXXXXXXX represents the amount of commands in the subroutine, and YYYYYYYY represents the name of the subroutine
; = Call a subroutine in the following format
	; XXXX
	where XXXX represents the name of the subroutine to be called
) = Call a subroutine in the following format
	) XXXXXXXX
	where XXXXXXXX represents the name of the subroutine to be called
@ = Forever Loop in the following format
	@ XXXX
	where XXXX represents the amount of commands to be executed in the loop
# = Forever Loop in the following format
	# XXXXXXXX
	where XXXXXXXX represents the amount of commands to be executed in the loop
{ = Begin comments
} = End comments

Description:
	DROL (Double Register Optimization Language) is a virtual register language, and acts by 
simulating two virtual registers (which are in reality just integers of the `int' C type). The DROL 
compiler calls GCC by default to compile the C source. If GCC is not present or aliased on your 
machine, use the `-c' flag  and then compile with the C compiler of your choice. It is standard 
practice to name DROL source files with the `.drol' extension.

CLI Flags:
	-c : Compile into C source file named `a.c', but not into executable.

Explanation:
	DROL is a double virtual register language, and as such, contains two "registers" (integers 
of the `int' C type) that can be manipulated using different single-character commands. Each 
register has its own distinct set of commands.

Notable Commands:
	Some notable commands are:
i,k - Increment 
d,e - Decrement 
o,p - Display number 
a,b - Display character 
n,q - Set register to user input 
z,y - Set register to zero 
*   - Swap the contents of the registers 
j," - If the registers are equal/not equal, etc execute the next X commands 
w,' - While the registers are equal/not equal, etc execute the next X commands (in a loop) 
!   - Display newline 
0   - Do nothing 
x   - Exit program successfully
:   - Declare a subroutine
;   - Call a subroutine
@,# - Forever loop, an unconditional
{,} - Begins and ends comments

Extended Commands:
	The premise of extended commands is one based in space saving - having two commands instead of one
allows for there to be less wasted space. Consider the following standard if loop:
	j == 0031
which tells the computer to execute the next 31 commands if the two registers are equal... This loop length
declaration is limited to a maximum of 9999, however. Instead of extending this (by doubling it), which for
the majority of loops, be unnecessary and a waste of space, we extended the command from j to ", which has
the same comparison operator, however it has up to 99999999 commands in the loop, for specifically loops 
longer than 9999. Note that for the subroutine command, both the length declaration and the function name
has been extended. Here is a table of all the extended commands:
	TYPE		COMMAND	EXTENSION
	If Loop		j	"
	While Loop	w	'
	Forever Loop	@	#
	Subroutine	:	(
	Call		;	)

Common pitfalls:
	1. The block length and subroutine names are reserved, meaning that after an if loop or while loop, 
there is 6 reserved spaces (10 for extended); after the forever loop or subroutine call there are 4 reserved 
spaces (8 for extended), and after a subroutine declaration, there is 8 reserved spaces (16 for extended).

	3. The `!' command exists for a reason: use it! (Why set your registers to 10 to display a newline when you don't have to?)
